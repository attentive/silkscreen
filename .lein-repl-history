(publish)
(bash "ls")
(bash "ls" (deref A))
(bash (deref A))
(use 'silkscreen.publish :reload)
(bash (deref A))
(use 'silkscreen.publish :reload)
(bash (deref A))
(script (deref A))
(with-script-language :pallet.stevedore.bash/bash (with-script-context [:ubuntu] (script (deref A))))
(use 'silkscreen.publish :reload)
(bash (deref A))
(bash (ls (deref A))
)
(bash ("ls" (deref A))
)
(use 'clojure.java.shell)
(sh (bash ("ls" (deref A))))
(sh (bash ("ls" .)))
(sh (bash ("ls" ".:)))
)
"
)))
(sh (bash ("ls" ".")))
(bash ("ls" "."))
(bash ("vim" "."))
(sh (bash ("vim" ".")))
(require pallet.stevedore)
(require 'pallet.stevedore)
(doc pallet.stevedore/chain-commands)
(doc pallet.stevedore/chain-commands*)
(chain-commands (bash "ls" "."))
(pallet.stevedore/chain-commands (bash "ls" "."))
(bash "ls" ".")
(bash ("ls" "."))
(bash (ls .))
(script (ls .))
(script (ls -l .))
(script '(ls -l .))
(script @(ls -l .))
(script ("ls -l ."))
(bash ("ls -l ."))
(bash (ls -l .))
(bash ("ls -l ."))
(sh ("ls -l ."))
(sh "ls -l .")
(sh "ls")
(sh "ls .")
(sh "ls \.")
(sh "ls /resources")
(sh "ls" "/resources")
(sh "ls" "resources")
(sh "cp" "-r" "resources/public/js" "target/site")
(use 'clojure.edn)
(java.util.Date. "2014-07-04")
(import 'java.util.Date)
(java.util.Date. "2014-07-04")
(java.util.Date. "2014-04-07")
(java.util.Date. "04-07-2014")
(java.util.Date. "04.07/2014")
(java.util.Date. "04/07/2014")
(read-string "#inst "2014-04-06")
")
(read-string "#inst 2014-04-06")
(read-string "#inst 2014-04-06T16:00:00:000-00:00")
(read-string "#inst \"2014-04-06T16:00:00:000-00:00\"")
(read-string "#inst \"2014-04-06\"")
(read {:foo #inst "2014-04-06"})
(read-string "{:foo #inst \"2014-04-06\"}")
(slurp "resources/2014-07-04-test-post.post")
(slurp "resources/posts/2014-07-04-test-post.post")
(line-seq (slurp "resources/posts/2014-07-04-test-post.post"))
(line-seq (java.io.File. "resources/posts/2014-07-04-test-post.post"))
(line-seq (java.io.Reader. "resources/posts/2014-07-04-test-post.post"))
(line-seq (java.io.BufferedReader. "resources/posts/2014-07-04-test-post.post"))
(line-seq (java.io.FileReader. "resources/posts/2014-07-04-test-post.post"))
(line-seq (clojure.java.io/reader "resources/posts/2014-07-04-test-post.post"))
(take-while (not= "==========") *)
(take-while (not= "==========") *1)
(take-while (not= "==========") *3)
(line-seq (clojure.java.io/reader "resources/posts/2014-07-04-test-post.post"))
(take-while (not= "==========") *1)
(take-while #(not= "==========" %) *1)
(split-with #(= "==========" %) (line-seq (clojure.java.io/reader "resources/posts/2014-07-04-test-post.post")))
(split-with #(not= "==========" %) (line-seq (clojure.java.io/reader "resources/posts/2014-07-04-test-post.post")))
(use 'silkscreen.post)
(read-post "resources/posts/2014-07-04-test-post.post")
(use 'silkscreen.post :reload)
(read-post "resources/posts/2014-07-04-test-post.post")
(use 'silkscreen.post :reload)
(read-post "resources/posts/2014-07-04-test-post.post")
(use 'silkscreen.post :reload)
(read-post "resources/posts/2014-07-04-test-post.post")
(use 'silkscreen.post :reload)
(read-post "resources/posts/2014-07-04-test-post.post")
(use 'silkscreen.post :reload)
(read-post "resources/posts/2014-07-04-test-post.post")
(use 'silkscreen.post :reload)
(read-post "resources/posts/2014-07-04-test-post.post")
(use 'silkscreen.post :reload)
(read-post "resources/posts/2014-07-04-test-post.post")
(use 'silkscreen.post :reload)
(read-post "resources/posts/2014-07-04-test-post.post")
(use 'silkscreen.post :reload)
(read-post "resources/posts/2014-07-04-test-post.post")
(cons 1 [2 3 4])
(use 'silkscreen.post :reload)
(dir silkscreen.post)
(path-elements "/resources/posts/2014-07-04-test-post.post")
(read-post "/resources/posts/2014-07-04-test-post.post")
(read-post "resources/posts/2014-07-04-test-post.post")
(path-elements (read-post "resources/posts/2014-07-04-test-post.post"))
(require '[clj-time.core :as t])
(def POST (read-post "resources/posts/2014-07-04-test-post.post"))
(:date POST)
(java.util.Date. (:date POST))
(import java.util.Date)
(java.util.Date. (:date POST))
POST
(:date POST)
(dir t)
(dir clj-time)
(dir clj-time.core)
(apply str (dir clj-time.core))
(doc dir)
(clj-time/DateTime. (:date POST))
(clj-time.DateTime. (:date POST))
(clj-time.core/DateTime. (:date POST))
(t/DateTime. (:date POST))
(date (:date POST))
(to-date (:date POST))
(t/date-time (:date POST))
(doc instance?)
(instance? java.util.Date (:date POST))
(t/from-date (:date POST))
(from-date (:date POST))
(doc from-date)
(use 'clj-time.core)
(doc from-date)
(use 'clj-time.coerce)
(from-date (:date POST))
(year (from-date (:date POST)))
(use 'silkscreen.post :reload)
(path-elements POST)
(use 'silkscreen.post :reload)
(path-elements POST)
(render-post POST "target/site")
(use 'silkscreen.post :reload)
(render-post POST "target/site")
(use 'silkscreen.post :reload)
(render-post POST "target/site")
(use 'silkscreen.post :reload)
(render-post POST "target/site")
(use 'clojure.pprint)
(pprint POST)
(dir clojure.pprint)
(doc pp)
pp
(use 'silkscreen.post :reload)
(pretty-post POST)
(println (pretty-post POST))
(use 'silkscreen.post :reload)
(println (pretty-post POST))
(= POST (read-post (pretty-post POST)))
(use 'silkscreen.post :reload)
(= POST (read-post (pretty-post POST)))
(pretty-post POST)
(with-in-str (pretty-post POST) (map println *in*))
(with-in-str (pretty-post POST) (map println (clojure.io.reader *in*)))
(with-in-str (pretty-post POST) (map println (clojure.java.reader *in*)))
(with-in-str (pretty-post POST) (map println (clojure.java.io/reader *in*)))
(with-in-str (pretty-post POST) (map println (line-seq (clojure.java.io/reader *in*))))
(with-in-str (pretty-post POST) (map println (line-seq *in*)))
(with-in-str (pretty-post POST) (line-seq *in*))
(with-in-str (pretty-post POST) (line-seq (clojure.java.io/reader *in*)))
(with-in-str (pretty-post POST) (line-seq (read)))
(use 'silkscreen.post :reload)
(read-post (pretty-post POST))
(use 'silkscreen.post :reload)
(read-post (pretty-post POST))
(pretty-post POST)
(use 'clojure.string)
(split-lines (pretty-post POST))
(split-with #(not= % "==========") (split-lines (pretty-post POST)))
(read-string (apply str (first (split-with #(not= % "==========") (split-lines (pretty-post POST))))))
(read-post (pretty-post POST))
(use 'silkscreen.post :reload)
(read-post (pretty-post POST))
(= POST *1)
POST
(def POST (read-file "resources/posts/2014-07-04-test-post.post"))
POST
(use 'silkscreen.post :reload)
(def POST (read-file "resources/posts/2014-07-04-test-post.post"))
POST
(= POST (read-post (pretty-post POST)))
(publish-site "target/site")
(use 'org.satta.glob)
(glob "*.clj")
(glob "/resources/posts/*.post")
(glob "resources/posts/*.post")
(map #(.getName % *))
(map #(.getName %) *2)
(map #(.getName %) (glob "resources/posts/*.post"))
(map #(.getFullName %) (glob "resources/posts/*.post"))
(map #(.getPath %) (glob "resources/posts/*.post"))
(publish-site "target/site")
(user/reset)
(use 'silkscreen.publish)
(publish-site)
(user/reset)
(use 'silkscreen.publish)
(publish-site)
(user/reset-all)
(publish-site)
(user/reset-all)
(publish-site)
(user/reset-all)
(publish-site)
(user/reset-all)
(publish-site)
(user/reset-all)
(publish-site)
(user/reset-all)
(publish-site)
(user/reset-all)
(publish-site)
(user/reset-all)
(publish-site)
(user/reset-all)
(publish-site)
(user/reset-all)
(publish-site)
(user/reset-all)
(publish-site)
(user/reset-all)
(publish-site)
(user/reset-all)
(publish-site)
(user/reset-all)
(publish-site)
(user/reset-all)
(publish-site)
(user/reset-all)
(publish-site)
(user/reset-all)
(publish-site)
(user/reset-all)
(publish-site)
(user/reset-all)
(publish-site)
(user/reset-all)
(publish-site)
(user/reset-all)
(publish-site)
(user/reset-all)
(publish-site)
(user/reset-all)
(re-matches)
(re-matches #".*.post" "foo.post")
(re-matches #"(.*).post" "foo.post")
(re-matches #"(?<filename>.*).post" "foo.post")
(re-sub "foo.post" #"(?<filename>.*).post" "${filename}")
(replace "foo.post" #"(?<filename>.*).post" "${filename}")
(use 'clojure.string)
(replace "foo.post" #"(?<filename>.*).post" "${filename}")
(user/reset-all)
(use 'silkscreen.publish)
(publish-site)
(user/reset-all)
(publish-site)
(user/reset-all)
(publish-site)
(user/reset-all)
(publish-site)
(user/reset-all)
(publish-site)
(user/reset-all)
(use 'net.cgrand.enlive-html)
(dir net.cgrand.enlive-html)
(doc snippet*)
(doc html-snippet)
(html-resource "/home/tom/dev/tomlynch.io.posts/templates/index.html")
(doc html-resource)
(html-resource "templates/index.html")
(use 'net.cgrand.tagsoup)
(doc parser)
(parser (java.io.File. "templates/index.html")
)
(parser (clojure.java.io/reader "templates/index.html")
)
(parser (clojure.java.io/reader "/home/tom/dev/tomlynch.io.posts/templates/index.html")
)
(use 'silkscreen.publish)
(render-page)
(use 'silkscreen.publish :reload)
(def TEMPL "/home/tom/dev/tomlynch.io.posts/templates/index.html")
(render-page nil TEMPL)
(def POST "/home/tom/dev/tomlynch.io.posts/posts/2014-7-6-got-a-new-title.post")
(use 'silkscreen.post)
(read-post POST)
(read-file POST)
(def POST (read-file POST))
(render-page POST TEMPL)
(use 'silkscreen.publish :reload)
(render-page POST TEMPL)
(use 'silkscreen.publish :reload)
(doc macroexpand-1)
(use 'silkscreen.publish :reload)
(render-page POST TEMPL)
(print (apply str (emit* (render-page POST TEMPL))))
(use 'silkscreen.publish :reload)
(print (apply str (emit* (render-page POST TEMPL))))
(render-page POST TEMPL)
((render-page POST TEMPL))
((render-page POST TEMPL) POST)
(print (apply str (emit* ((render-page POST TEMPL) POST))))
(print (apply str (emit* ((render-page _ TEMPL) POST))))
(print (apply str (emit* ((render-page post TEMPL) post))))
(print (apply str (emit* ((render-page post TEMPL) POST))))
(print (apply str (emit* ((render-page POST TEMPL) POST))))
(use 'silkscreen.publish :reload)
(render-page POST TEMPL)
(use 'silkscreen.publish :reload)
(render-page POST TEMPL)
(use 'silkscreen.publish)
(publish-site)
(use 'silkscreen.publish)
(use 'silkscreen.publish :reload)
(publish-site)
(use 'silkscreen.publish :reload)
(publish-site)
(use 'silkscreen.publish :reload)
(publish-site)
(use 'silkscreen.publish :reload)
(publish-site)
(use 'silkscreen.publish :reload)
(publish-site)
(use 'silkscreen.publish :reload)
(publish-site)
(print (:out (sh "ls")))
(print-sh "ls")
(doc print-sh)
(macroexpand-1 (print-sh "ls"))
(use 'silkscreen.publish :reload)
(use 'clojure.java.shell)
(defmacro print-sh [& args]
    `(print (:out (sh ~@args))))
(print-sh "ls")
(use 'silkscreen.publish :reload)
(print-sh "ls")
(doc print-sh)
(publish-site)
(use 'silkscreen.publish :reload)
(publish-site)
(use 'silkscreen.publish :reload)
(publish-site)
(use 'silkscreen.publish :reload)
(publish-site)
(use 'silkscreen.publish :reload)
(publish-site)
(print (:out (sh "foo")))
(print (:out (sh "cat error.txt")))
(print (:out (sh "ls")))
(print (:out (sh "cat" "error.txt")))
(use 'silkscreen.publish :reload)
(print (:out (sh "cat" "error.txt")))
(publish-site)
(use 'silkscreen.publish :reload)
(publish-site)
(use 'silkscreen.publish :reload)
(publish-site)
(use 'silkscreen.publish :reload)
(publish-site)
(use 'silkscreen.publish :reload)
(publish-site)
(use 'silkscreen.publish :reload)
(publish-site)
(use 'silkscreen.publish :reload)
(publish-site)
(use 'silkscreen.publish :reload)
(publish-site)
(use 'silkscreen.publish :reload)
(publish-site)
(use 'silkscreen.publish :reload)
(publish-site)
(use 'silkscreen.publish :reload)
(publish-site)
(use 'silkscreen.publish :reload)
(publish-site)
(use 'silkscreen.publish :reload)
(publish-site)
(use 'silkscreen.publish :reload)
(publish-site)
(use 'silkscreen.publish :reload)
(publish-site)
(use 'silkscreen.publish :reload)
(publish-site)
(use 'silkscreen.publish :reload)
(publish-site)
(use 'silkscreen.publish :reload)
(publish-site)
(use 'silkscreen.publish :reload)
(publish-site)
(use 'silkscreen.publish :reload)
(publish-site)
(use 'silkscreen.publish :reload)
(publish-site)
(use 'silkscreen.publish :reload)
(publish-site)
(use 'silkscreen.publish :reload)
(publish-site)
(use 'silkscreen.publish :reload)
(publish-site)
(use 'silkscreen.publish :reload)
(publish-site)
(use 'silkscreen.publish :reload)
(publish-site)
(use 'silkscreen.publish :reload)
(publish-site)
(use 'silkscreen.publish :reload)
(publish-site)
(use 'silkscreen.publish :reload)
(publish-site)
(use 'silkscreen.publish :reload)
(publish-site)
(use 'silkscreen.publish :reload)
(publish-site)
(use 'silkscreen.publish :reload)
(publish-site)
(use 'silkscreen.publish :reload)
(publish-site)
(use 'silkscreen.publish :reload)
(publish-site)
